name: Tests

on:
  workflow_dispatch:
  push:
    paths-ignore:
      - '**.md'
  pull_request:
    branches: [main]
  schedule:
    - cron: '0 10 * * *'

env:
  TEST_COVERAGE_FILE: test-coverage.out
  TEST_COVERAGE_ARTIFACT: chisel-test-coverage

jobs:
  unit-tests:
    runs-on: ubuntu-22.04
    name: Unit Tests
    env:
      TEST_COVERAGE_HTML_FILE: test-coverage.html
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-go@v3
        with:
          go-version-file: 'go.mod'

      - name: Run unit tests
        run: go test -v -cover -coverprofile=${TEST_COVERAGE_FILE} ./...

      - name: Convert test coverage to HTML
        if: always()
        continue-on-error: true
        run: |
          set -eu
          if [ -f ${TEST_COVERAGE_FILE} ]
          then
            go tool cover -html=${TEST_COVERAGE_FILE} \
              -o=${TEST_COVERAGE_HTML_FILE}
          fi

      - name: Upload test coverage
        uses: actions/upload-artifact@v4
        if: always()
        continue-on-error: true
        with:
          name: ${{ env.TEST_COVERAGE_ARTIFACT }}
          path: ./test-coverage*

  tics-static-code-analysis:
    runs-on: ubuntu-24.04
    name: TiCS Static Code Analysis
    needs: [unit-tests]
    if: github.event_name != 'push'
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-go@v3
        with:
          go-version-file: 'go.mod'

      - uses: actions/download-artifact@v4
      
      - uses: ./.github/actions/build-chisel/
        name: Build Chisel (TiCS analysis precondition)
        env:
          CGO_ENABLED: "0"
      
      - name: Prepare cobertura XML results
        env:
          TICS_COVERAGE_FOLDER: ".coverage"
        run: |
          set -x
          mkdir -p ${TICS_COVERAGE_FOLDER}
          go install github.com/boumenot/gocover-cobertura@latest
          gocover-cobertura \
            < ${{ env.TEST_COVERAGE_ARTIFACT }}/${{ env.TEST_COVERAGE_FILE }} \
            > ${TICS_COVERAGE_FOLDER}/coverage.xml

      - run: go install honnef.co/go/tools/cmd/staticcheck@latest

      - name: Run TiCS analysis
        uses: tiobe/tics-github-action@v3
        with:
          mode: ${{ github.event_name == 'pull_request' && 'client' || 'qserver' }}
          codetype: ${{ github.event_name == 'pull_request' && 'TESTCODE' || 'PRODUCTION' }}
          project: chisel
          branchdir: .
          viewerUrl: 'https://canonical.tiobe.com/tiobeweb/TICS/api/cfg?name=default'
          displayUrl: 'https://canonical.tiobe.com/tiobeweb/TICS/TqiDashboard.html#axes=Project(chisel)'
          ticsAuthToken: ${{ secrets.TICSAUTHTOKEN }}
          installTics: true
